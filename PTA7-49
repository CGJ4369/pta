Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!

Now you are suppose to check if there are more numbers with this property. That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.

Input Specification:

Each input contains one test case. Each case contains one positive integer with no more than 20 digits.

Output Specification:

For each test case, first print in a line "Yes" if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or "No" if not. Then in the next line, print the doubled number.

Sample Input:

1234567899
Sample Output:

Yes
2469135798


#include<stdio.h>
#include<string.h>
int main()
{
	char s[21],s2[21];
	int i,len,sum=0,c_s[10]={0},c_s2[10]={0};
	scanf("%s",s);
	len=strlen(s);
	s2[len-1]=(s[len-1]-'0')*2%10+'0';
	for(i=len-2;i>=0;i--)
	{
		s2[i]=(s[i]-'0')*2%10+(s[i+1]-'0')*2/10+'0'; 
	}
	s2[len]='\0';
	for(i=0;i<len;i++)
	{
		c_s[s[i]-'0']++;
		c_s2[s2[i]-'0']++;
	}
	for(i=0;i<10;i++)
	{
		if(c_s[i]!=c_s2[i])break;
	}
	if(i==10)
		printf("Yes\n");
	else
		printf("No\n");
	if((s[0]-'0')*2/10>0)
		printf("1");
	puts(s2);
	return 0;
}
